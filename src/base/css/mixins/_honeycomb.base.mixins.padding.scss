// Build the padding rules, with optional suffix
@mixin buildPadding($suffix: "", $important: false) {
    .padded#{$suffix} {
        @include padding(1, all, $important);
    }

    .padded-h#{$suffix} {
        @include padding(1, left, $important);
        @include padding(1, right, $important);
    }

    .padded-left#{$suffix} {
        @include padding(1, left, $important);
    }

    .padded-right#{$suffix} {
        @include padding(1, right, $important);
    }

    .padded-v#{$suffix}{
        @include padding(1, top, $important);
        @include padding(1, bottom, $important);
    }

    .padded-top#{$suffix} {
        @include padding(1, top, $important);
    }

    .padded-bottom#{$suffix} {
        @include padding(1, bottom, $important);
    }

    .padded--tight#{$suffix} {
        @include padding(0.5, all, $important);
    }

    .padded-h--tight#{$suffix} {
        @include padding(0.5, left, $important);
        @include padding(0.5, right, $important);
    }

    .padded-left--tight#{$suffix} {
        @include padding(0.5, left, $important);
    }

    .padded-right--tight#{$suffix} {
        @include padding(0.5, right, $important);
    }

    .padded-v--tight#{$suffix} {
        @include padding(0.5, top, $important);
        @include padding(0.5, bottom, $important);
    }

    .padded-top--tight#{$suffix} {
        @include padding(0.5, top, $important);
    }

    .padded-bottom--tight#{$suffix} {
        @include padding(0.5, bottom, $important);
    }

    .padded--loose#{$suffix} {
        @include padding(2, all, $important);
    }

    .padded-h--loose#{$suffix} {
        @include padding(2, left, $important);
        @include padding(2, right, $important);
    }

    .padded-left--loose#{$suffix} {
        @include padding(2, left, $important);
    }

    .padded-right--loose#{$suffix} {
        @include padding(2, right, $important);
    }

    .padded-v--loose#{$suffix} {
        @include padding(2, top, $important);
        @include padding(2, bottom, $important);
    }

    .padded-top--loose#{$suffix} {
        @include padding(2, top, $important);
    }

    .padded-bottom--loose#{$suffix} {
        @include padding(2, bottom, $important);
    }

    .padded--none#{$suffix} {
        @include padding(0, all, $important);
    }

    .padded-h--none#{$suffix} {
        @include padding(0, left, $important);
        @include padding(0, right, $important);
    }

    .padded-left--none#{$suffix} {
        @include padding(0, left, $important);
    }

    .padded-right--none#{$suffix} {
        @include padding(0, right, $important);
    }

    .padded-v--none#{$suffix} {
        @include padding(0, top, $important);
        @include padding(0, bottom, $important);
    }

    .padded-top--none#{$suffix} {
        @include padding(0, top, $important);
    }

    .padded-bottom--none#{$suffix} {
        @include padding(0, bottom, $important);
    }
}

//  Mixin for adding padding to objects/components.
@mixin padding($scale: 1, $direction: all, $important: false) {

  $padding: inherit;
  $property: padding;
  $flag: null;

  @if index($hc-padding-whitelist, $scale) {
    $padding: round($hc-spacing-unit * $scale);
  } @else {
    @error "Scale '#{$scale}' is not a valid value for `padding`.";
    $padding: false;
  }

  // Determine the direction.
  @if $direction == "all" {
    $property: padding;
  } @else {
    $property: padding-#{$direction};
  }

  // Important flag.
  @if $important {
      $flag: !important;
  }

  // Print the rule.
  @if $padding {
    #{$property}: $padding $flag;
    #{$property}: px-rem($padding) $flag;
  }
}