@use 'sass:math';

/*------------------------------------*\
    #GRID MIXIN
\*------------------------------------*/


/**
 * This mixin generates the available CSS grid classes from grid settings.
 * CSS grid classes must be enabled in settings for this to work.
 *
 */
@mixin buildGrid ($gutter: 0, $suffix: "") {
    @if $hc-enable-grid-classes {
        @include build($gutter, $suffix);
        @include build($gutter, $suffix, "push", "margin-left");
    } @else {
        @warn "CSS grid classes are disabled. Please enable CSS grid classes using `$hc-enable-grid-classes: true`";
    }
}

@mixin build ($gutter: 0, $suffix: "", $action: "span", $property: "width") {
    @if $hc-enable-grid-classes {
        @each $grid-col in $hc-grid-cols {
            @for $i from 0 through $grid-col {

                $total: 0;
                @if $i != 0 {
                    $total: math.div(100, math.div($grid-col, $i)) * 1%;
                }

                @if $suffix == '' {
                    // Lower specificity for standard classes, to let default responsive behaviour take effect 
                    %#{$hc-grid-class}__col--#{$action}-#{$i}-of-#{$grid-col}#{$suffix},
                    .#{$hc-grid-class}__col--#{$action}-#{$i}-of-#{$grid-col}#{$suffix} {
                        #{$property}: $total;
                    }
                } @else {
                    // Greater specificity for responsive classes, to allow default responsive behaviour to be overridden
                    %#{$hc-grid-class}__col--#{$action}-#{$i}-of-#{$grid-col}#{$suffix},
                    .grid .#{$hc-grid-class}__col--#{$action}-#{$i}-of-#{$grid-col}#{$suffix} {
                        #{$property}: $total;
                    }
                }
            }
        }
    } @else {
        @warn "CSS grid classes are disabled. Please enable CSS grid classes using `$hc-enable-grid-classes: true`";
    }
}
