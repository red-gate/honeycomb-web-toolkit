/*------------------------------------*\
#GRID
\*------------------------------------*/


/**
* Generate the available CSS grid classes for grid, grid__row, grid__col.
* Build the grid and breakpoint grids.
*/

@if $enable-grid-classes {
    %#{$grid-class},
    .#{$grid-class} {
        &:before, &:after {
            content: " ";
            display: table;
        }

        &:after {
            clear: both;
        }
    }

    %#{$grid-class}__row,
    .#{$grid-class}__row {
        @extend %clearfix !optional;

        &.#{$grid-class}__row--no-gutter {
            .#{$grid-class}__col {
                padding-left: 0;
                padding-right: 0;
            }
        }
    }

    %#{$grid-class}__col,
    .#{$grid-class}__col {
        display: block;
        float: left;
        padding-left: $grid-gutter;
        padding-right: $grid-gutter;

        &.#{$grid-class}__col--no-gutter {
            padding-left: 0;
            padding-right: 0;
        }

        &.#{$grid-class}__col--no-left-gutter {
            padding-left: 0;
        }

        &.#{$grid-class}__col--no-right-gutter {
            padding-right: 0;
        }
    }

    /**
    * Build the default grid.
    */
    @include buildGrid($grid-gutter);

    /**
    * Build the grid at breakpoints, using Desktop first approach, like the
    * responsive mixin in the base module.
    */
    $breakpoints: false !default;
    @if $breakpoints {
        @each $breakpoint in $breakpoints {
            $name: nth($breakpoint, 1);
            $width: nth($breakpoint, 2);
            $declaration: "(#{$mqProperty} #{$width})";

            @media only screen and #{$declaration} {
                @include buildGrid($grid-gutter, "--#{$name}");
            }
        }
    }
}
